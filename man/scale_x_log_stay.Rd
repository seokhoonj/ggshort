% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{scale_x_log_stay}
\alias{scale_x_log_stay}
\alias{scale_y_log_stay}
\title{Stay-scale axis transformation (log1p with custom breaks)}
\usage{
scale_x_log_stay(..., breaks = ggplot2::waiver())

scale_y_log_stay(..., breaks = ggplot2::waiver())
}
\arguments{
\item{...}{Other arguments passed on to \verb{scale_(x|y)_continuous()}}

\item{breaks}{Break specification. By default, a function from
\code{.log_stay_breaks()} which returns 0â€“90 plus doubling thereafter.
Can be replaced by any numeric vector or function as accepted by
ggplot2 scales.}
}
\value{
A ggplot2 scale object.
}
\description{
Convenience scales for plotting length-of-stay or similar count variables
on a \code{log1p} scale (i.e. \eqn{log(1+x)}), while providing more interpretable
breaks. By default, breaks are fixed at common stay durations up to 90
(0, 1, 2, 3, 5, 7, 10, 14, 21, 28, 42, 60, 90), then continue doubling
(180, 360, 720, ...) until the maximum data value.
}
\details{
These functions wrap \code{\link[ggplot2:scale_continuous]{ggplot2::scale_x_continuous()}} and
\code{\link[ggplot2:scale_continuous]{ggplot2::scale_y_continuous()}} with a predefined transform and breaks.
}
\examples{
\dontrun{
library(tweedie)

tw <- tweedie::rtweedie(n = 1000, mu = 7, phi = 2, power = 1.5)
set.seed(123)
df <- data.frame(x = round(tw))
gghistogram(df, x = x, probs = .5) +
  scale_x_log_stay() +
  theme_view()
}

}
\seealso{
\code{\link[ggplot2:scale_continuous]{ggplot2::scale_x_continuous()}}, \code{\link[scales:transform_log]{scales::log1p_trans()}}
}
